[{"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\SideMenu.js":"1","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingImages.js":"2","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MainPage.js":"3"},{"size":1158,"mtime":1610203835440,"results":"4","hashOfConfig":"5"},{"size":2338,"mtime":1611486802660,"results":"6","hashOfConfig":"5"},{"size":7358,"mtime":1611486787262,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1n3mdsf",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\SideMenu.js",["15"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingImages.js",["16","17","18"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MainPage.js",["19"],"import React, { Component, useCallback } from 'react'\r\nimport FileContainer from \"./FilesContainer\"\r\nimport { useDropzone } from 'react-dropzone'\r\nimport prettyBytes from \"pretty-bytes\"\r\nimport ImagesSettings from \"./ImagesSettings\"\r\nimport \"../App.css\"\r\nimport \"../specy.css\"\r\nconst isVideo = require('is-video')\r\nfunction DropZone(props) {\r\n\tconst onDrop = useCallback(acceptedFiles => {\r\n\t\tprops.drop(acceptedFiles)\r\n\t}, [])\r\n\tconst { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\tlet classes = isDragActive ? \"filePicker formatsHovered\" : \"filePicker\"\r\n\tclasses += props.settings.darkMode === \"on\" ? \" filePickerWhite\" : \"\"\r\n\treturn (\r\n\t\t<div {...getRootProps()} className={classes}>\r\n\t\t\t<input {...getInputProps()} />\r\n\t\t\t{\r\n\t\t\t\tisDragActive ?\r\n\t\t\t\t\t<p>Drop files here...</p> :\r\n\t\t\t\t\t<p>Drop files here or click to select</p>\r\n\t\t\t}\r\n\t\t\t<div className=\"formats\">\r\n\t\t\t\t.gif .webp .png .jpg\r\n\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nclass MainPage extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tisFileHover: false,\r\n\t\t\tfiles: {},\r\n\t\t\tglobalImgSettings: {\r\n\t\t\t\tscale: 2,\r\n\t\t\t\tdenoiseLevel: \"None\",\r\n\t\t\t\toutputFormat: \"Original\"\r\n\t\t\t}\r\n\t\t}\r\n\t\twindow.ipcRenderer.on('done-execution', (event, arg) => {\r\n\t\t\ttry {\r\n\t\t\t\tlet file = this.state.files[arg.id]\r\n\t\t\t\tfile.message = arg.message\r\n\t\t\t\tfile.status = arg.status\r\n\t\t\t\tfile.success = arg.success\r\n\t\t\t\tfile.updatedImg = arg.upscaledImg\r\n\t\t\t\tconsole.log(\"Done\", arg.id)\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tfiles: this.state.files\r\n\t\t\t\t})\r\n\t\t\t} catch (e) {\r\n\t\t\t\twindow.showMessage(\"Error\", 1)\r\n\t\t\t\tconsole.log(e)\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t\twindow.ipcRenderer.on('update-execution', (event, arg) => {\r\n\t\t\ttry {\r\n\r\n\t\t\t\tlet file = this.state.files[arg.id]\r\n\t\t\t\tfile.status = arg.status\r\n\t\t\t\tif (Array.isArray(arg.frames)) file.frames = arg.frames\r\n\t\t\t\tconsole.log(\"Update\", arg.id)\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tfiles: this.state.files\r\n\t\t\t\t})\r\n\t\t\t} catch (e) {\r\n\t\t\t\twindow.showMessage(\"Error\", 1)\r\n\t\t\t\tconsole.log(e)\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\r\n\tremoveImage = (e) => {\r\n\t\tdelete this.state.files[e]\r\n\t\tthis.setState({\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\texecuteWaifu = () => {\r\n\t\tconsole.log(\"Executing\")\r\n\t\tlet dataToSend = Object.keys(this.state.files).map((el) => {\r\n\t\t\tel = this.state.files[el]\r\n\t\t\treturn {\r\n\t\t\t\tname: el.name,\r\n\t\t\t\tpath: el.path,\r\n\t\t\t\twidth: el.width,\r\n\t\t\t\theight: el.height,\r\n\t\t\t\tnoise: el.noise,\r\n\t\t\t\tscale: el.scale,\r\n\t\t\t\tspeed: el.speed,\r\n\t\t\t\tmodel: el.model,\r\n\t\t\t\tframes: [0, 0],\r\n\t\t\t\tendPath: this.props.settings.outputPath,\r\n\t\t\t\tformat: el.format,\r\n\t\t\t\tid: el.id,\r\n\t\t\t\tsize: el.size,\r\n\t\t\t}\r\n\t\t})\r\n\t\twindow.ipcRenderer.send('execute-waifu', dataToSend)\r\n\t}\r\n\tcancelExecution = () => {\r\n\t\twindow.ipcRenderer.send(\"cancel-execution\")\r\n\t\tObject.keys(this.state.files).map(img => {\r\n\t\t\timg = this.state.files[img]\r\n\t\t\timg.status = \"idle\"\r\n\t\t\timg.frames = [0, 0]\r\n\t\t\treturn img\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\r\n\t}\r\n\thandleIndividualSettingsChange = (value, type, id) => {\r\n\t\tlet toChange = isNaN(value) ? value : parseFloat(value)\r\n\t\tif (value < 0.6 && type === \"scale\" && value !== \"\") {\r\n\t\t\ttoChange = 0.6\r\n\t\t}\r\n\t\tlet oldState = this.state.files[id]\r\n\t\toldState[type] = toChange\r\n\t\tthis.setState({\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\r\n\thandleImgSettingsChange = (value, type) => {\r\n\r\n\t\tlet toChange = isNaN(value) ? value : parseFloat(value)\r\n\t\tif (value < 0.6 && type === \"scale\" && value !== \"\") {\r\n\t\t\ttoChange = 0.6\r\n\t\t}\r\n\t\tlet newState = this.state.globalImgSettings\r\n\t\tnewState[type] = toChange\r\n\t\tObject.keys(this.state.files).map(img => {\r\n\t\t\timg = this.state.files[img]\r\n\t\t\timg.noise = newState.denoiseLevel\r\n\t\t\timg.scale = newState.scale\r\n\t\t\timg.format = newState.outputFormat\r\n\t\t\timg.model = newState.model\r\n\t\t\treturn img\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tglobalImgSettings: newState,\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\r\n\tgetRandomId = () => {\r\n\t\tlet str1 = Math.random().toString(36).substring(7)\r\n\t\tlet str2 = Math.random().toString(36).substring(7)\r\n\t\treturn str1 + str2\r\n\t}\r\n\r\n\thandleDrop = (e) => {\r\n\t\tlet files = this.state.files\r\n\t\tfor (const file of e) {\r\n\t\t\tlet obj = {\r\n\t\t\t\tname: file.name,\r\n\t\t\t\tpath: file.path,\r\n\t\t\t\tsrc: null,\r\n\t\t\t\tvideo: <video />,\r\n\t\t\t\twidth: 0,\r\n\t\t\t\theight: 0,\r\n\t\t\t\tspeed: 1,\r\n\t\t\t\tendPath: \"default\",\r\n\t\t\t\tscale: this.state.globalImgSettings.scale,\r\n\t\t\t\tstatus: \"idle\",\r\n\t\t\t\tmodel: \"Drawing\",\r\n\t\t\t\tupdatedImg: null,\r\n\t\t\t\tframes: [0, 0],\r\n\t\t\t\tisVideo: isVideo(file.path),\r\n\t\t\t\tformat: this.state.globalImgSettings.outputFormat,\r\n\t\t\t\tnoise: this.state.globalImgSettings.denoiseLevel,\r\n\t\t\t\tid: this.getRandomId(),\r\n\t\t\t\tsize: file.size,\r\n\t\t\t\tprettySize: prettyBytes(file.size)\r\n\t\t\t}\r\n\t\t\tlet exists = Object.keys(files).findIndex(e => {\r\n\t\t\t\treturn files[e].path === obj.path\r\n\t\t\t})\r\n\t\t\tif (exists < 0) {\r\n\t\t\t\tfiles[obj.id] = obj\r\n\t\t\t\tconst reader = new FileReader();\r\n\t\t\t\treader.onload = (data) => {\r\n\t\t\t\t\tif (obj.isVideo) {\r\n\t\t\t\t\t\tlet callback = (e) => {\r\n\t\t\t\t\t\t\tobj.width = e.currentTarget.videoWidth\r\n\t\t\t\t\t\t\tobj.height = e.currentTarget.videoHeight\r\n\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\tfiles: files\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tobj.video = <video className=\"previewImage\" \r\n\t\t\t\t\t\t\tautoPlay \r\n\t\t\t\t\t\t\tmuted={true} \r\n\t\t\t\t\t\t\tloop={true} \r\n\t\t\t\t\t\t\tonLoadedMetadata={callback}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<source src={data.target.result}>\r\n\t\t\t\t\t\t\t</source>\r\n\t\t\t\t\t\t</video>\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\tfiles: files\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet image = new Image();\r\n\t\t\t\t\t\timage.src = data.target.result\r\n\t\t\t\t\t\timage.onload = () => {\r\n\t\t\t\t\t\t\tobj.src = data.target.result\r\n\t\t\t\t\t\t\tobj.width = image.width\r\n\t\t\t\t\t\t\tobj.height = image.height\r\n\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\tfiles: files\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\treader.readAsDataURL(file);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//=======================================================//\r\n\trender() {\r\n\t\tlet s = this.props.settings\r\n\t\tlet canRun = Object.keys(this.state.files).every(key => {\r\n\t\t\tlet file = this.state.files[key]\r\n\t\t\treturn file.status === \"done\" || file.status === \"idle\"\r\n\t\t})\r\n\t\tif (Object.keys(this.state.files).length === 0) canRun = false\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={s.darkMode === \"on\" ? \"content dm-L1\" : \"content l1\"}\r\n\t\t\t\tstyle={{ perspective: \"100px\" }}\r\n\t\t\t>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={s.darkMode === \"on\" ? \"upperMainPage dm-L2\" : \"upperMainPage box-shadow\"}\r\n\t\t\t\t>\r\n\t\t\t\t\t<DropZone drop={this.handleDrop} settings={s} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bottomMainPage\">\r\n\t\t\t\t\t<ImagesSettings\r\n\t\t\t\t\t\tsettings={s}\r\n\t\t\t\t\t\tisEmpty={Object.keys(this.state.files).length === 0}\r\n\t\t\t\t\t\tcanRun={canRun}\r\n\t\t\t\t\t\tdata={this.state.globalImgSettings}\r\n\t\t\t\t\t\taction={this.handleImgSettingsChange}\r\n\t\t\t\t\t\texecuteWaifu={this.executeWaifu}\r\n\t\t\t\t\t\tcancelExecution={this.cancelExecution}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className={s.darkMode === \"on\" ? \"filesHolder dm-L2\" : \"filesHolder l1 box-shadow\"}>\r\n\t\t\t\t\t\t<div className=\"overflowFileHolder scroll\">\r\n\t\t\t\t\t\t\t{Object.keys(this.state.files).map((key) => {\r\n\t\t\t\t\t\t\t\tlet file = this.state.files[key]\r\n\t\t\t\t\t\t\t\treturn <FileContainer\r\n\t\t\t\t\t\t\t\t\tsettings={s}\r\n\t\t\t\t\t\t\t\t\tkey={file.id}\r\n\t\t\t\t\t\t\t\t\tcanRun={canRun}\r\n\t\t\t\t\t\t\t\t\taction={this.removeImage}\r\n\t\t\t\t\t\t\t\t\tindividualChange={this.handleIndividualSettingsChange}\r\n\t\t\t\t\t\t\t\t\tdata={file}\r\n\t\t\t\t\t\t\t\t\ttoggleFloatingImages={this.props.toggleFloatingImages}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MainPage",{"ruleId":"20","severity":1,"message":"21","line":17,"column":5,"nodeType":"22","messageId":"23","endLine":19,"endColumn":6},{"ruleId":"20","severity":1,"message":"21","line":5,"column":5,"nodeType":"22","messageId":"23","endLine":7,"endColumn":6},{"ruleId":"24","severity":1,"message":"25","line":45,"column":31,"nodeType":"26","endLine":45,"endColumn":78},{"ruleId":"24","severity":1,"message":"25","line":59,"column":31,"nodeType":"26","endLine":59,"endColumn":78},{"ruleId":"27","severity":1,"message":"28","line":12,"column":5,"nodeType":"29","endLine":12,"endColumn":7,"suggestions":"30"},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["31"],{"desc":"32","fix":"33"},"Update the dependencies array to be: [props]",{"range":"34","text":"35"},[424,426],"[props]"]