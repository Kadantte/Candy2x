[{"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\Settings.js":"1","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingImages.js":"2","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MainPage.js":"3","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ContentWrapper.js":"4","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\TopMenu.js":"5","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\SideMenu.js":"6","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ImagesSettings.js":"7","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FilesContainer.js":"8"},{"size":1419,"mtime":1610022298022,"results":"9","hashOfConfig":"10"},{"size":1740,"mtime":1610100953887,"results":"11","hashOfConfig":"10"},{"size":5480,"mtime":1610144809288,"results":"12","hashOfConfig":"10"},{"size":653,"mtime":1610038199154,"results":"13","hashOfConfig":"10"},{"size":2010,"mtime":1610105247330,"results":"14","hashOfConfig":"10"},{"size":1119,"mtime":1610038574389,"results":"15","hashOfConfig":"10"},{"size":3044,"mtime":1610145756752,"results":"16","hashOfConfig":"10"},{"size":3589,"mtime":1610145776798,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"1n3mdsf",{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\Settings.js",["38"],"import React, { Component } from 'react'\r\nimport \"../App.css\"\r\nimport \"../specy.css\"\r\nclass Settings extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }  \r\n    handleSettingsChange = (e) =>{\r\n\r\n        let el = e.target\r\n        let value = el.value\r\n        if(el.type === \"checkbox\"){\r\n            let checked = Boolean(el.checked)\r\n            value = checked ? \"on\" : \"off\"\r\n        }\r\n        let obj = {\r\n            type: el.name,\r\n            value: value\r\n        }\r\n        this.props.toggleSettings(obj)\r\n    }\r\n    //=======================================================//\r\n    render() {\r\n        let s = this.props.settings\r\n        return (\r\n            <div className={s.darkMode === \"on\" ? \"content dm-L1\" : \"content l1\"  }>\r\n                <div className={s.darkMode === \"on\" ? \"settingsContainer dm-L2\" : \"settingsContainer box-shadow\"  }>\r\n                    <div className=\"row centerY\">\r\n                        <div className=\"settingsOption\">Dark mode</div>\r\n                        <input \r\n                            type=\"checkbox\"\r\n                            onChange={this.handleSettingsChange}\r\n                            name=\"darkMode\"\r\n                            checked={s.darkMode === \"on\" ? true : false}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Settings","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingImages.js",["39","40","41"],"import React, { Component } from 'react'\r\nimport \"../App.css\"\r\nimport { Close } from \"@material-ui/icons\"\r\nclass FloatingImages extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n    }\r\n    preventDefault = (e) =>{\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n    }\r\n\t//=======================================================//\r\n\trender() {\r\n        let shown = this.props.toggled ? \"flex\" : \"none\"\r\n\r\n        let isHorizontal =  this.props.data.format < 1.5\r\n\r\n        let orientation = {\r\n            width: isHorizontal ? \"calc(35vw - 1.5rem)\" : \"unset\",\r\n            height: isHorizontal ? \"unset\" : \"calc(91vh - 2rem)\"\r\n        }\r\n\t\treturn (\r\n            <div \r\n                className=\"floatingImages\" \r\n                style={{display: shown}}\r\n                onClick={this.props.toggle}\r\n            >\r\n                <Close \r\n                    className=\"closeBtn\" \r\n                    style={{fontSize:45}} \r\n                    onClick={this.props.toggle}\r\n                />\r\n                <div \r\n                    className=\"imagesContainer\"\r\n                    onClick={this.preventDefault}\r\n                >\r\n                    <div className=\"textAndImage\">\r\n                        <div className=\"floatingImgText\">Original</div>\r\n                        <img src={this.props.data.original} style={orientation}/>\r\n                    </div>\r\n                    <div className=\"textAndImage\">\r\n                        <div className=\"floatingImgText\">Modified</div>\r\n                        <img src={this.props.data.modified} style={orientation}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default FloatingImages","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MainPage.js",["42"],"import React, {Component, useCallback} from 'react'\r\nimport FileContainer from \"./FilesContainer\"\r\nimport {useDropzone} from 'react-dropzone'\r\nimport prettyBytes from \"pretty-bytes\"\r\nimport ImagesSettings from \"./ImagesSettings\"\r\nimport \"../App.css\"\r\nimport \"../specy.css\"\r\nfunction DropZone(props) {\r\n\tconst onDrop = useCallback(acceptedFiles => {\r\n\t\tprops.drop(acceptedFiles)\r\n\t}, [])\r\n\tconst {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\tlet classes = isDragActive ? \"filePicker formatsHovered\" : \"filePicker\"\r\n\tclasses += props.settings.darkMode === \"on\" ? \" filePickerWhite\" : \"\"\r\n\treturn (\r\n\t  <div {...getRootProps()} className={classes}>\r\n\t\t<input {...getInputProps()} />\r\n\t\t{\r\n\t\t  isDragActive ?\r\n\t\t\t<p>Drop files here...</p> :\r\n\t\t\t<p>Drop files here or click to select.</p>\r\n\t\t}\r\n\t\t<div className=\"formats\">\r\n\t\t\t.webp .png .jpg\r\n\t\t</div>\r\n\t  </div>\r\n\t)\r\n  }\r\nclass MainPage extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tisFileHover: false,\r\n\t\t\tfiles:{},\r\n\t\t\tglobalImgSettings:{\r\n\t\t\t\tscale: 2,\r\n\t\t\t\tdenoiseLevel: \"None\",\r\n\t\t\t\toutputFormat: \"Original\"\r\n\t\t\t}\r\n\t\t}\r\n\t\twindow.ipcRenderer.on('done-execution', (event, arg) => {\r\n\t\t\tlet file = this.state.files[arg.id]\r\n\t\t\tfile.status = arg.status\r\n\t\t\tfile.success = arg.success\r\n\t\t\tfile.updatedImg = arg.upscaledImg\r\n\t\t\tconsole.log(\"Done\")\r\n\t\t\tthis.setState({\r\n\t\t\t\tfiles: this.state.files\r\n\t\t\t})\r\n\t\t})\r\n\t\twindow.ipcRenderer.on('update-execution', (event, arg) => {\r\n\t\t\tconsole.log(\"Update\")\r\n\t\t\tlet file = this.state.files[arg.id]\r\n\t\t\tfile.status = arg.status\r\n\t\t\tthis.setState({\r\n\t\t\t\tfiles: this.state.files\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\tremoveImage = (e) => {\r\n\t\tdelete this.state.files[e]\r\n\t\tthis.setState({\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\texecuteWaifu = () =>{\r\n\t\tlet dataToSend = Object.keys(this.state.files).map((el)=>{\r\n\t\t\tel = this.state.files[el]\r\n\t\t\treturn {\r\n\t\t\t\tname:el.name,\r\n\t\t\t\tpath:el.path,\r\n\t\t\t\twidth: el.width,\r\n\t\t\t\theight: el.height,\r\n\t\t\t\tnoise: el.noise,\r\n\t\t\t\tscale: el.scale,\r\n\t\t\t\tformat: el.format,\r\n\t\t\t\tid: el.id,\r\n\t\t\t\tsize: el.size,\r\n\t\t\t}\r\n\t\t})\r\n\t\twindow.ipcRenderer.send('execute-waifu',dataToSend)\r\n\t}\r\n\thandleIndividualSettingsChange = (value,type,id) => {\r\n\t\tif(value < 0.6 && type===\"scale\" && value !== \"\"){\r\n\t\t\tvalue = 0.6\r\n\t\t}\r\n\t\tlet oldState = this.state.files[id]\r\n\t\tconsole.log(oldState[type])\r\n\t\toldState[type] = value\r\n\t\tthis.setState({\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\thandleImgSettingsChange = (value,type) =>{\r\n\t\tlet toChange = this.state.globalImgSettings[type]\r\n\t\ttoChange = isNaN(value) ? value : parseFloat(value)\r\n\t\tif(value < 0.6 && type===\"scale\" && value !== \"\"){\r\n\t\t\ttoChange = 0.6\r\n\t\t}\r\n\t\tlet newState = this.state.globalImgSettings\r\n\t\tnewState[type] = toChange\r\n\t\tObject.keys(this.state.files).map(img =>{\r\n\t\t\timg = this.state.files[img]\r\n\t\t\timg.noise = newState.denoiseLevel\r\n\t\t\timg.scale = newState.scale\r\n\t\t\timg.format = newState.outputFormat\r\n\t\t\treturn img\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tglobalImgSettings: newState,\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\tgetRandomId = () => {\r\n\t\tlet str1 = Math.random().toString(36).substring(7)\r\n\t\tlet str2 = Math.random().toString(36).substring(7)\r\n\t\treturn str1 + str2\r\n\t}\r\n    handleDrop = (e) => {\r\n\t\tlet files = this.state.files\r\n\t\tfor (const file of e) { \r\n\t\t\tlet obj = {\r\n\t\t\t\tname:file.name,\r\n\t\t\t\tpath:file.path,\r\n\t\t\t\tsrc: null,\r\n\t\t\t\twidth: 0,\r\n\t\t\t\theight: 0,\r\n\t\t\t\tscale: this.state.globalImgSettings.scale,\r\n\t\t\t\tstatus: \"idle\",\r\n\t\t\t\tupdatedImg: null,\r\n\t\t\t\tformat:this.state.globalImgSettings.outputFormat,\r\n\t\t\t\tnoise: this.state.globalImgSettings.denoiseLevel,\r\n\t\t\t\tid: this.getRandomId(),\r\n\t\t\t\tsize: file.size,\r\n\t\t\t\tprettySize: prettyBytes(file.size)\r\n\t\t\t}\r\n\t\t\tlet exists = Object.keys(files).findIndex(e =>{\r\n\t\t\t\treturn files[e].path === obj.path\r\n\t\t\t})\r\n\t\t\tif(exists < 0){\r\n\t\t\t\tfiles[obj.id] = obj\r\n\t\t\t\tconst reader = new FileReader();\r\n\t\t\t\treader.onload = (data) => {\r\n\t\t\t\t\tvar image = new Image();\r\n\t\t\t\t\timage.src = data.target.result\r\n\t\t\t\t\timage.onload = () => {\r\n\t\t\t\t\t\tobj.src = data.target.result\r\n\t\t\t\t\t\tobj.width = image.width\r\n\t\t\t\t\t\tobj.height = image.height\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\tfiles: files\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\treader.readAsDataURL(file);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//=======================================================//\r\n\trender() {\r\n\t\tlet s = this.props.settings\r\n\t\treturn (\r\n\t\t\t<div \r\n\t\t\t\tclassName={s.darkMode === \"on\" ? \"content dm-L1\" : \"content l1\"} \r\n\t\t\t\tstyle={{perspective:\"100px\"}}>\r\n\t\t\t\t<div \r\n\t\t\t\t\tclassName={s.darkMode === \"on\" ? \"upperMainPage dm-L2\" : \"upperMainPage box-shadow\"}\r\n\t\t\t\t>\r\n\r\n\t\t\t\t\t<DropZone drop={this.handleDrop} settings={s}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bottomMainPage\">\r\n\t\t\t\t\t<ImagesSettings \r\n\t\t\t\t\t\tsettings={s}\r\n\t\t\t\t\t\tdata={this.state.globalImgSettings} \r\n\t\t\t\t\t\taction={this.handleImgSettingsChange}\r\n\t\t\t\t\t\texecuteWaifu={this.executeWaifu}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className={s.darkMode === \"on\" ? \"filesHolder dm-L2\" : \"filesHolder l1 box-shadow\"}>\r\n\t\t\t\t\t\t<div className=\"overflowFileHolder scroll\">\r\n\t\t\t\t\t\t\t{Object.keys(this.state.files).map((key) =>{\r\n\t\t\t\t\t\t\t\tlet file = this.state.files[key]\r\n\t\t\t\t\t\t\t\treturn <FileContainer \r\n\t\t\t\t\t\t\t\tsettings={s}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={file.id} \r\n\t\t\t\t\t\t\t\t\t\t\taction={this.removeImage}\r\n\t\t\t\t\t\t\t\t\t\t\tindividualChange={this.handleIndividualSettingsChange}\r\n\t\t\t\t\t\t\t\t\t\t\tdata={file}\r\n\t\t\t\t\t\t\t\t\t\t\ttoggleFloatingImages={this.props.toggleFloatingImages}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n            </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MainPage","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ContentWrapper.js",["43","44"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\TopMenu.js",[],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\SideMenu.js",["45"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ImagesSettings.js",["46"],"import React, { Component } from 'react'\r\nclass ImagesSettings extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n    }\r\n\r\n    handleChange = (event) =>{\r\n        this.props.action(event.target.value,event.target.name)\r\n    }\r\n    openFolder = () => {\r\n\t\twindow.ipcRenderer.send(\"open-folder\")\r\n\t}\r\n    //=======================================================//\r\n    render() {\r\n        let data = this.props.data\r\n        let s = this.props.settings\r\n        return (\r\n\r\n            <div className={s.darkMode === \"on\" ? \"sideSettings dm-L2\" : \"sideSettings l1 box-shadow\"}>\r\n                <div className=\"innerSideSettings\">\r\n                    <div className=\"column\">\r\n                        <div>Scale</div>\r\n                        <input \r\n                            type=\"number\"\r\n                            step=\"0.05\"\r\n                            value={data.scale} \r\n                            className=\"input wm-L2\" \r\n                            name=\"scale\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div>Denoise level</div>\r\n                        <select \r\n                            className=\"input wm-L2\" \r\n                            value={data.denoiseLevel}\r\n                            name=\"denoiseLevel\"\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <option>None</option>\r\n                            <option>Low</option>\r\n                            <option>Medium</option>\r\n                            <option>High</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div>Output format</div>\r\n                        <select \r\n                            className=\"input wm-L2\" \r\n                            value={data.outputFormat}\r\n                            name=\"outputFormat\"\r\n                            onChange={this.handleChange}\r\n                        >   \r\n                            <option>Original</option>\r\n                            <option>.png</option>\r\n                            <option>.jpg</option>\r\n                            <option>.webp</option>\r\n                        </select>\r\n                    </div>\r\n                    <button \r\n                        style={{margin:0,marginTop:\"auto\"}}\r\n\t\t\t\t\t\tclassName=\"button fillY outputFolder\"\r\n\t\t\t\t\t\tonClick={this.openFolder}\r\n\t\t\t\t\t>\r\n                        Open output folder\r\n                    </button>\r\n                    <button \r\n                        className=\"button fillY darkTeal\" \r\n                        style={{marginTop:\"0.5rem\"}}\r\n                        onClick={this.props.executeWaifu}\r\n                    >\r\n                        Run all\r\n                    </button>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImagesSettings","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FilesContainer.js",["47","48"],{"ruleId":"49","severity":1,"message":"50","line":5,"column":5,"nodeType":"51","messageId":"52","endLine":7,"endColumn":6},{"ruleId":"49","severity":1,"message":"50","line":5,"column":2,"nodeType":"51","messageId":"52","endLine":7,"endColumn":6},{"ruleId":"53","severity":1,"message":"54","line":39,"column":25,"nodeType":"55","endLine":39,"endColumn":82},{"ruleId":"53","severity":1,"message":"54","line":43,"column":25,"nodeType":"55","endLine":43,"endColumn":82},{"ruleId":"56","severity":1,"message":"57","line":11,"column":5,"nodeType":"58","endLine":11,"endColumn":7,"suggestions":"59"},{"ruleId":"49","severity":1,"message":"50","line":6,"column":2,"nodeType":"51","messageId":"52","endLine":8,"endColumn":6},{"ruleId":"60","severity":1,"message":"61","line":12,"column":7,"nodeType":"62","messageId":"63","endLine":12,"endColumn":8},{"ruleId":"49","severity":1,"message":"50","line":17,"column":2,"nodeType":"51","messageId":"52","endLine":19,"endColumn":6},{"ruleId":"49","severity":1,"message":"50","line":3,"column":5,"nodeType":"51","messageId":"52","endLine":6,"endColumn":6},{"ruleId":"49","severity":1,"message":"50","line":5,"column":2,"nodeType":"51","messageId":"52","endLine":7,"endColumn":6},{"ruleId":"53","severity":1,"message":"54","line":43,"column":25,"nodeType":"55","endLine":43,"endColumn":71},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["64"],"no-unused-vars","'s' is assigned a value but never used.","Identifier","unusedVar",{"desc":"65","fix":"66"},"Update the dependencies array to be: [props]",{"range":"67","text":"68"},[383,385],"[props]"]