[{"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\SideMenu.js":"1","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MainPage.js":"2","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\index.js":"3","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\TopMenu.js":"4","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FilesContainer.js":"5","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingMessage.js":"6","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ContentWrapper.js":"7","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingImages.js":"8","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ImagesSettings.js":"9","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\Settings.js":"10","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MenuOption.js":"11"},{"size":1158,"mtime":1610203835440,"results":"12","hashOfConfig":"13"},{"size":6645,"mtime":1611310004019,"results":"14","hashOfConfig":"13"},{"size":3796,"mtime":1611180018481,"results":"15","hashOfConfig":"13"},{"size":2088,"mtime":1610203837341,"results":"16","hashOfConfig":"13"},{"size":5974,"mtime":1611309785487,"results":"17","hashOfConfig":"13"},{"size":844,"mtime":1610203817901,"results":"18","hashOfConfig":"13"},{"size":618,"mtime":1610203805903,"results":"19","hashOfConfig":"13"},{"size":1751,"mtime":1610203813320,"results":"20","hashOfConfig":"13"},{"size":3648,"mtime":1611310120730,"results":"21","hashOfConfig":"13"},{"size":2325,"mtime":1611309470207,"results":"22","hashOfConfig":"13"},{"size":849,"mtime":1610203828785,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"1n3mdsf",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"31"},"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\SideMenu.js",["57"],"import React, { Component } from 'react'\r\nimport MenuOption from \"./MenuOption\"\r\nimport { HomeRounded, Settings } from \"@material-ui/icons\"\r\nimport \"../App.css\"\r\nimport \"../specy.css\"\r\nlet st = {\r\n    selected: {\r\n        fontSize: 40,\r\n        color: \"white\"\r\n    },\r\n    disabled: {\r\n        fontSize: 40,\r\n        color: \"#7e7e7e\"\r\n    }\r\n}\r\nclass SideMenu extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    //=======================================================//\r\n    render() {\r\n        let sel = this.props.selectedIndex\r\n        let s = this.props.settings\r\n        return (\r\n            <div className={s.darkMode === \"on\" ? \"sideMenu dm-L2\" : \"sideMenu dm-L1\"}>\r\n                <MenuOption index={0} action={this.props.action} settings={s}>\r\n                    <HomeRounded style={sel === 0 ? st.selected : st.disabled} />\r\n                </MenuOption>\r\n                <MenuOption index={1} action={this.props.action} settings={s}>\r\n                    <Settings style={sel === 1 ? st.selected : st.disabled} />\r\n                </MenuOption>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SideMenu",["58","59"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MainPage.js",["60"],"import React, { Component, useCallback } from 'react'\r\nimport FileContainer from \"./FilesContainer\"\r\nimport { useDropzone } from 'react-dropzone'\r\nimport prettyBytes from \"pretty-bytes\"\r\nimport ImagesSettings from \"./ImagesSettings\"\r\nimport \"../App.css\"\r\nimport \"../specy.css\"\r\nfunction DropZone(props) {\r\n\tconst onDrop = useCallback(acceptedFiles => {\r\n\t\tprops.drop(acceptedFiles)\r\n\t}, [])\r\n\tconst { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\tlet classes = isDragActive ? \"filePicker formatsHovered\" : \"filePicker\"\r\n\tclasses += props.settings.darkMode === \"on\" ? \" filePickerWhite\" : \"\"\r\n\treturn (\r\n\t\t<div {...getRootProps()} className={classes}>\r\n\t\t\t<input {...getInputProps()} />\r\n\t\t\t{\r\n\t\t\t\tisDragActive ?\r\n\t\t\t\t\t<p>Drop files here...</p> :\r\n\t\t\t\t\t<p>Drop files here or click to select</p>\r\n\t\t\t}\r\n\t\t\t<div className=\"formats\">\r\n\t\t\t\t.gif .webp .png .jpg\r\n\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nclass MainPage extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tisFileHover: false,\r\n\t\t\tfiles: {},\r\n\t\t\tglobalImgSettings: {\r\n\t\t\t\tscale: 2,\r\n\t\t\t\tdenoiseLevel: \"None\",\r\n\t\t\t\toutputFormat: \"Original\"\r\n\t\t\t}\r\n\t\t}\r\n\t\twindow.ipcRenderer.on('done-execution', (event, arg) => {\r\n\t\t\ttry {\r\n\t\t\t\tlet file = this.state.files[arg.id]\r\n\t\t\t\tfile.message = arg.message\r\n\t\t\t\tfile.status = arg.status\r\n\t\t\t\tfile.success = arg.success\r\n\t\t\t\tfile.updatedImg = arg.upscaledImg\r\n\t\t\t\tconsole.log(\"Done\", arg.id)\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tfiles: this.state.files\r\n\t\t\t\t})\r\n\t\t\t} catch (e) {\r\n\t\t\t\twindow.showMessage(\"Error\", 1)\r\n\t\t\t\tconsole.log(e)\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t\twindow.ipcRenderer.on('update-execution', (event, arg) => {\r\n\t\t\ttry {\r\n\r\n\t\t\t\tlet file = this.state.files[arg.id]\r\n\t\t\t\tfile.status = arg.status\r\n\t\t\t\tif (Array.isArray(arg.frames)) file.frames = arg.frames\r\n\t\t\t\tconsole.log(\"Update\", arg.id)\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tfiles: this.state.files\r\n\t\t\t\t})\r\n\t\t\t} catch (e) {\r\n\t\t\t\twindow.showMessage(\"Error\", 1)\r\n\t\t\t\tconsole.log(e)\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\r\n\tremoveImage = (e) => {\r\n\t\tdelete this.state.files[e]\r\n\t\tthis.setState({\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\texecuteWaifu = () => {\r\n\t\tconsole.log(\"Executing\")\r\n\t\tlet dataToSend = Object.keys(this.state.files).map((el) => {\r\n\t\t\tel = this.state.files[el]\r\n\t\t\treturn {\r\n\t\t\t\tname: el.name,\r\n\t\t\t\tpath: el.path,\r\n\t\t\t\twidth: el.width,\r\n\t\t\t\theight: el.height,\r\n\t\t\t\tnoise: el.noise,\r\n\t\t\t\tscale: el.scale,\r\n\t\t\t\tspeed: el.speed,\r\n\t\t\t\tframes: [0, 0],\r\n\t\t\t\tendPath: this.props.settings.outputPath,\r\n\t\t\t\tformat: el.format,\r\n\t\t\t\tid: el.id,\r\n\t\t\t\tsize: el.size,\r\n\t\t\t}\r\n\t\t})\r\n\t\twindow.ipcRenderer.send('execute-waifu', dataToSend)\r\n\t}\r\n\tcancelExecution = () => {\r\n\t\twindow.ipcRenderer.send(\"cancel-execution\")\r\n\t\tObject.keys(this.state.files).map(img => {\r\n\t\t\timg = this.state.files[img]\r\n\t\t\timg.status = \"idle\"\r\n\t\t\timg.frames = [0, 0]\r\n\t\t\treturn img\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\r\n\t}\r\n\thandleIndividualSettingsChange = (value, type, id) => {\r\n\t\tlet toChange = isNaN(value) ? value : parseFloat(value)\r\n\t\tif (value < 0.6 && type === \"scale\" && value !== \"\") {\r\n\t\t\ttoChange = 0.6\r\n\t\t}\r\n\t\tlet oldState = this.state.files[id]\r\n\t\toldState[type] = toChange\r\n\t\tthis.setState({\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\r\n\thandleImgSettingsChange = (value, type) => {\r\n\t\tlet toChange = isNaN(value) ? value : parseFloat(value)\r\n\t\tif (value < 0.6 && type === \"scale\" && value !== \"\") {\r\n\t\t\ttoChange = 0.6\r\n\t\t}\r\n\t\tlet newState = this.state.globalImgSettings\r\n\t\tnewState[type] = toChange\r\n\t\tObject.keys(this.state.files).map(img => {\r\n\t\t\timg = this.state.files[img]\r\n\t\t\timg.noise = newState.denoiseLevel\r\n\t\t\timg.scale = newState.scale\r\n\t\t\timg.format = newState.outputFormat\r\n\t\t\treturn img\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tglobalImgSettings: newState,\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\r\n\tgetRandomId = () => {\r\n\t\tlet str1 = Math.random().toString(36).substring(7)\r\n\t\tlet str2 = Math.random().toString(36).substring(7)\r\n\t\treturn str1 + str2\r\n\t}\r\n\r\n\thandleDrop = (e) => {\r\n\t\tlet files = this.state.files\r\n\t\tfor (const file of e) {\r\n\t\t\tlet obj = {\r\n\t\t\t\tname: file.name,\r\n\t\t\t\tpath: file.path,\r\n\t\t\t\tsrc: null,\r\n\t\t\t\twidth: 0,\r\n\t\t\t\theight: 0,\r\n\t\t\t\tspeed: 1,\r\n\t\t\t\tendPath: \"default\",\r\n\t\t\t\tscale: this.state.globalImgSettings.scale,\r\n\t\t\t\tstatus: \"idle\",\r\n\t\t\t\tupdatedImg: null,\r\n\t\t\t\tframes: [0, 0],\r\n\t\t\t\tformat: this.state.globalImgSettings.outputFormat,\r\n\t\t\t\tnoise: this.state.globalImgSettings.denoiseLevel,\r\n\t\t\t\tid: this.getRandomId(),\r\n\t\t\t\tsize: file.size,\r\n\t\t\t\tprettySize: prettyBytes(file.size)\r\n\t\t\t}\r\n\t\t\tlet exists = Object.keys(files).findIndex(e => {\r\n\t\t\t\treturn files[e].path === obj.path\r\n\t\t\t})\r\n\t\t\tif (exists < 0) {\r\n\t\t\t\tfiles[obj.id] = obj\r\n\t\t\t\tconst reader = new FileReader();\r\n\t\t\t\treader.onload = (data) => {\r\n\t\t\t\t\tvar image = new Image();\r\n\t\t\t\t\timage.src = data.target.result\r\n\t\t\t\t\timage.onload = () => {\r\n\t\t\t\t\t\tobj.src = data.target.result\r\n\t\t\t\t\t\tobj.width = image.width\r\n\t\t\t\t\t\tobj.height = image.height\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\tfiles: files\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treader.readAsDataURL(file);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//=======================================================//\r\n\trender() {\r\n\t\tlet s = this.props.settings\r\n\t\tlet canRun = Object.keys(this.state.files).every(key => {\r\n\t\t\tlet file = this.state.files[key]\r\n\t\t\treturn file.status === \"done\" || file.status === \"idle\"\r\n\t\t})\r\n\t\tif (Object.keys(this.state.files).length === 0) canRun = false\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={s.darkMode === \"on\" ? \"content dm-L1\" : \"content l1\"}\r\n\t\t\t\tstyle={{ perspective: \"100px\" }}\r\n\t\t\t>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={s.darkMode === \"on\" ? \"upperMainPage dm-L2\" : \"upperMainPage box-shadow\"}\r\n\t\t\t\t>\r\n\t\t\t\t\t<DropZone drop={this.handleDrop} settings={s} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bottomMainPage\">\r\n\t\t\t\t\t<ImagesSettings\r\n\t\t\t\t\t\tsettings={s}\r\n\t\t\t\t\t\tisEmpty={Object.keys(this.state.files).length === 0}\r\n\t\t\t\t\t\tcanRun={canRun}\r\n\t\t\t\t\t\tdata={this.state.globalImgSettings}\r\n\t\t\t\t\t\taction={this.handleImgSettingsChange}\r\n\t\t\t\t\t\texecuteWaifu={this.executeWaifu}\r\n\t\t\t\t\t\tcancelExecution={this.cancelExecution}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className={s.darkMode === \"on\" ? \"filesHolder dm-L2\" : \"filesHolder l1 box-shadow\"}>\r\n\t\t\t\t\t\t<div className=\"overflowFileHolder scroll\">\r\n\t\t\t\t\t\t\t{Object.keys(this.state.files).map((key) => {\r\n\t\t\t\t\t\t\t\tlet file = this.state.files[key]\r\n\t\t\t\t\t\t\t\treturn <FileContainer\r\n\t\t\t\t\t\t\t\t\tsettings={s}\r\n\t\t\t\t\t\t\t\t\tkey={file.id}\r\n\t\t\t\t\t\t\t\t\tcanRun={canRun}\r\n\t\t\t\t\t\t\t\t\taction={this.removeImage}\r\n\t\t\t\t\t\t\t\t\tindividualChange={this.handleIndividualSettingsChange}\r\n\t\t\t\t\t\t\t\t\tdata={file}\r\n\t\t\t\t\t\t\t\t\ttoggleFloatingImages={this.props.toggleFloatingImages}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MainPage",["61","62"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\index.js",[],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\TopMenu.js",[],["63","64"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FilesContainer.js",["65","66"],"import React, { Component } from 'react'\r\nimport \"../App.css\"\r\nimport { DeleteForever, Visibility, Info } from \"@material-ui/icons\"\r\nclass FileContainer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    sendImagesData = () => {\r\n        let data = {\r\n            original: this.props.data.src,\r\n            modified: this.props.data.updatedImg,\r\n            format: this.props.data.height / this.props.data.width,\r\n            hasImages: true\r\n        }\r\n        this.props.toggleFloatingImages(data)\r\n    }\r\n    handleChange = (e) => {\r\n        let el = e.target\r\n        this.props.individualChange(el.value, el.name, this.props.data.id)\r\n    }\r\n    showInfo = (e) => {\r\n        window.showMessage(this.props.data.message, 1, 10000, () => {\r\n            console.log(\"clicked\")\r\n        })\r\n    }\r\n    //=======================================================//\r\n    render() {\r\n        let data = this.props.data\r\n        let s = this.props.settings\r\n        let color = s.darkMode === \"on\" ? \"rgb(27, 25, 35)\" : \"rgb(238, 238, 238)\"\r\n        let visible = { visibility: \"hidden\" }\r\n        let visible2 = { visibility: \"hidden\" }\r\n        let visible3 = { visibility: \"visible\" }\r\n        if (!this.props.canRun) visible3.visibility = \"hidden\"\r\n        if (data.status === \"done\") {\r\n            visible2.visibility = \"visible\"\r\n            if (data.success) {\r\n                color = s.darkMode === \"on\" ? \"rgb(75 153 75)\" : \"rgb(200, 239, 200)\"\r\n                visible.visibility = \"visible\"\r\n            } else {\r\n                color = s.darkMode === \"on\" ? \"rgb(144 74 74)\" : \"#e3b0b0\"\r\n            }\r\n        } else if (data.status === \"pending\" || data.status === \"processing\") {\r\n            color = s.darkMode === \"on\" ? \"#d6c869\" : \"#f7f1cb\"\r\n        }\r\n        let progressBar = data.frames[0] / data.frames[1] * 95 + \"%\"\r\n        if (data.status === \"done\") progressBar = \"100%\"\r\n        return (\r\n            <div\r\n                className={s.darkMode === \"on\" ? \"fileRow\" : \"fileRow text-dark\"}\r\n                style={{ backgroundColor: color }}>\r\n                <div className=\"row\">\r\n                    <div style={{ position: \"relative\" }}>\r\n                        <img src={data.src} className=\"previewImage\" />\r\n                        <div className=\"fileName\">\r\n                            {data.name}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dataCol\">\r\n                        <div>{data.prettySize}</div>\r\n                        <div>\r\n                            {data.width}x{data.height}\r\n                            {\" ➤ \"}\r\n                            {Math.floor(data.width * data.scale)}x\r\n                            {Math.floor(data.height * data.scale)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    className=\"progressWrapper\"\r\n                    style={{ visibility: data.frames[1] === 0 || data.status === \"done\" ? \"hidden\" : \"visible\" }}\r\n                >\r\n                    <div>\r\n                        {data.frames[0] === data.frames[1]\r\n                            ? \"Encoding gif...\"\r\n                            : \"Upscaling frame: \" + data.frames[0] + \"/\" + data.frames[1]\r\n                        }\r\n                    </div>\r\n                    <div className=\"progressOuter\">\r\n                        <div\r\n                            className=\"progressInner\"\r\n                            style={{ width: progressBar }}\r\n                        >\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex centerX centerY\">\r\n                    {data.name.includes(\".gif\") ?\r\n                        <div className=\"column centerY\" style={{ marginRight: \"0.5rem\" }}>\r\n                            <div style={{ marginTop: \"-1.2rem\" }}>Speed</div>\r\n                            <input\r\n                                type=\"number\"\r\n                                className={\"individualInput\"}\r\n                                step=\"0.1\"\r\n                                name=\"speed\"\r\n                                onChange={this.handleChange}\r\n                                value={data.speed}\r\n                            />\r\n                        </div>\r\n                        : \"\"\r\n                    }\r\n                    <div className=\"column centerY\" style={{ marginRight: \"0.5rem\" }}>\r\n                        <div style={{ marginTop: \"-1.2rem\" }}>Scale</div>\r\n                        <input\r\n                            type=\"number\"\r\n                            className={\"individualInput\"}\r\n                            step=\"0.05\"\r\n                            name=\"scale\"\r\n                            onChange={this.handleChange}\r\n                            value={data.scale}\r\n                        />\r\n                    </div>\r\n                    <Info\r\n                        className={s.darkMode === \"on\" ? \"text-white highlightHover\" : \"text-dark highlightHover\"}\r\n                        style={{ fontSize: 25, ...visible2 }}\r\n                        onClick={this.showInfo}\r\n                    />\r\n                    <Visibility\r\n                        className={s.darkMode === \"on\" ? \"text-white highlightHover\" : \"text-dark highlightHover\"}\r\n                        style={{ fontSize: 25, ...visible }}\r\n                        onClick={this.sendImagesData}\r\n                    />\r\n                    <DeleteForever\r\n                        onClick={() => {\r\n                            this.props.action(data.id)\r\n                        }}\r\n\r\n                        className={s.darkMode === \"on\" ? \"text-white redHover\" : \"text-dark redHover\"}\r\n                        style={{ fontSize: 25, ...visible3 }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileContainer","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingMessage.js",[],["67","68"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ContentWrapper.js",["69","70"],"import React, { Component } from 'react'\r\n\r\nimport \"../App.css\"\r\nimport \"../specy.css\"\r\nclass ContentWrapper extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t}\r\n\r\n\t//=======================================================//\r\n\trender() {\r\n\t\tlet s = this.props.settings\r\n\t\treturn (\r\n\t\t\t<div style={{ display: \"flex\" }}>\r\n\t\t\t\t{this.props.children.map((page, i) => {\r\n\t\t\t\t\tlet isHidden = !(i === this.props.selectedPage)\r\n\t\t\t\t\treturn <div style={isHidden ? { display: \"none\" } : {}} className=\"contentWrapper\" key={i}>\r\n\t\t\t\t\t\t{page}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ContentWrapper","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingImages.js",["71","72","73"],"import React, { Component } from 'react'\r\nimport \"../App.css\"\r\nimport { Close } from \"@material-ui/icons\"\r\nclass FloatingImages extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    preventDefault = (e) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n    }\r\n    //=======================================================//\r\n    render() {\r\n        let shown = this.props.toggled ? \"flex\" : \"none\"\r\n\r\n        let isHorizontal = this.props.data.format < 1.5\r\n\r\n        let orientation = {\r\n            width: isHorizontal ? \"calc(35vw - 1.5rem)\" : \"unset\",\r\n            height: isHorizontal ? \"unset\" : \"calc(91vh - 2rem)\"\r\n        }\r\n        return (\r\n            <div\r\n                className=\"floatingImages\"\r\n                style={{ display: shown }}\r\n                onClick={this.props.toggle}\r\n            >\r\n                <Close\r\n                    className=\"closeBtn\"\r\n                    style={{ fontSize: 45 }}\r\n                    onClick={this.props.toggle}\r\n                />\r\n                <div\r\n                    className=\"imagesContainer\"\r\n                    onClick={this.preventDefault}\r\n                >\r\n                    <div className=\"textAndImage\">\r\n                        <div className=\"floatingImgText\">Original</div>\r\n                        <img src={this.props.data.original} style={orientation} />\r\n                    </div>\r\n                    <div className=\"textAndImage\">\r\n                        <div className=\"floatingImgText\">Modified</div>\r\n                        <img src={this.props.data.modified} style={orientation} />\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FloatingImages","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ImagesSettings.js",["74"],"import React, { Component } from 'react'\r\nclass ImagesSettings extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.props.action(event.target.value, event.target.name)\r\n    }\r\n    openFolder = () => {\r\n        window.ipcRenderer.send(\"open-folder\")\r\n    }\r\n    executeBtnCommand = () => {\r\n        if (this.props.canRun) {\r\n            this.props.executeWaifu()\r\n        } else {\r\n            this.props.cancelExecution()\r\n\r\n        }\r\n    }\r\n    //=======================================================//\r\n    render() {\r\n        let data = this.props.data\r\n        let s = this.props.settings\r\n        return (\r\n\r\n            <div className={s.darkMode === \"on\" ? \"sideSettings dm-L2\" : \"sideSettings l1 box-shadow\"}>\r\n                <div className=\"innerSideSettings\">\r\n                    <div className=\"column\">\r\n                        <div>Scale</div>\r\n                        <input\r\n                            type=\"number\"\r\n                            step=\"0.05\"\r\n                            value={data.scale}\r\n                            className=\"input wm-L2\"\r\n                            name=\"scale\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div>Denoise level</div>\r\n                        <select\r\n                            className=\"input wm-L2\"\r\n                            value={data.denoiseLevel}\r\n                            name=\"denoiseLevel\"\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <option>None</option>\r\n                            <option>Low</option>\r\n                            <option>Medium</option>\r\n                            <option>High</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div>Output format</div>\r\n                        <select\r\n                            className=\"input wm-L2\"\r\n                            value={data.outputFormat}\r\n                            name=\"outputFormat\"\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <option>Original</option>\r\n                            <option>.png</option>\r\n                            <option>.jpg</option>\r\n                            <option>.webp</option>\r\n                        </select>\r\n                    </div>\r\n                    <button\r\n                        style={{ margin: 0, marginTop: \"auto\" }}\r\n                        className=\"button fillY outputFolder\"\r\n                        onClick={this.openFolder}\r\n                    >\r\n                        Open output folder\r\n                    </button>\r\n                    <button\r\n                        className={\r\n                            \"button fillY runBtn \" +\r\n                            (this.props.canRun || this.props.isEmpty ? \"darkTeal\" : \"red\")\r\n                        }\r\n                        onClick={this.executeBtnCommand}\r\n                        style={{\r\n                            filter: this.props.isEmpty ? \"brightness(0.8)\" : \"brightness(1)\"\r\n                        }}\r\n                        disabled={this.props.isEmpty}\r\n                    >\r\n                        {this.props.canRun || this.props.isEmpty ? \"Run all\" : \"Cancel\"}\r\n                    </button>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImagesSettings","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\Settings.js",[],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MenuOption.js",["75"],"import React, { Component } from 'react'\r\nimport \"../App.css\"\r\nlet st = {\r\n    wrapper: {\r\n        borderRadius: \"0.5rem\",\r\n        width: \"55px\",\r\n        height: \"55px\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        marginTop: \"1rem\"\r\n    }\r\n\r\n}\r\nclass MenuOption extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    //=======================================================//\r\n\r\n    render() {\r\n        let s = this.props.settings\r\n        return (\r\n            <div\r\n                style={st.wrapper}\r\n                className={s.darkMode === \"on\" ? \"dm-L1\" : \"dm-L2\"}\r\n                onClick={() => this.props.action(this.props.index)}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MenuOption",{"ruleId":"76","severity":1,"message":"77","line":17,"column":5,"nodeType":"78","messageId":"79","endLine":19,"endColumn":6},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":11,"column":5,"nodeType":"86","endLine":11,"endColumn":7,"suggestions":"87"},{"ruleId":"80","replacedBy":"88"},{"ruleId":"82","replacedBy":"89"},{"ruleId":"80","replacedBy":"90"},{"ruleId":"82","replacedBy":"91"},{"ruleId":"76","severity":1,"message":"77","line":5,"column":5,"nodeType":"78","messageId":"79","endLine":7,"endColumn":6},{"ruleId":"92","severity":1,"message":"93","line":54,"column":25,"nodeType":"94","endLine":54,"endColumn":72},{"ruleId":"80","replacedBy":"95"},{"ruleId":"82","replacedBy":"96"},{"ruleId":"76","severity":1,"message":"77","line":6,"column":2,"nodeType":"78","messageId":"79","endLine":8,"endColumn":3},{"ruleId":"97","severity":1,"message":"98","line":12,"column":7,"nodeType":"99","messageId":"100","endLine":12,"endColumn":8},{"ruleId":"76","severity":1,"message":"77","line":5,"column":5,"nodeType":"78","messageId":"79","endLine":7,"endColumn":6},{"ruleId":"92","severity":1,"message":"93","line":39,"column":25,"nodeType":"94","endLine":39,"endColumn":83},{"ruleId":"92","severity":1,"message":"93","line":43,"column":25,"nodeType":"94","endLine":43,"endColumn":83},{"ruleId":"76","severity":1,"message":"77","line":3,"column":5,"nodeType":"78","messageId":"79","endLine":6,"endColumn":6},{"ruleId":"76","severity":1,"message":"77","line":16,"column":5,"nodeType":"78","messageId":"79","endLine":18,"endColumn":6},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-native-reassign",["101"],"no-negated-in-lhs",["102"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["103"],["101"],["102"],["101"],["102"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["101"],["102"],"no-unused-vars","'s' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},"Update the dependencies array to be: [props]",{"range":"106","text":"107"},[387,389],"[props]"]