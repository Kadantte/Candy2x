[{"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingMessage.js":"1","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MainPage.js":"2","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\TopMenu.js":"3","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\Settings.js":"4","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\index.js":"5","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ContentWrapper.js":"6","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingImages.js":"7","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\SideMenu.js":"8","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FilesContainer.js":"9","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ImagesSettings.js":"10","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MenuOption.js":"11"},{"size":844,"mtime":1610203817901,"results":"12","hashOfConfig":"13"},{"size":5610,"mtime":1610571026880,"results":"14","hashOfConfig":"13"},{"size":2088,"mtime":1610203837341,"results":"15","hashOfConfig":"13"},{"size":2224,"mtime":1610571158626,"results":"16","hashOfConfig":"13"},{"size":3579,"mtime":1610571136392,"results":"17","hashOfConfig":"13"},{"size":618,"mtime":1610203805903,"results":"18","hashOfConfig":"13"},{"size":1751,"mtime":1610203813320,"results":"19","hashOfConfig":"13"},{"size":1158,"mtime":1610203835440,"results":"20","hashOfConfig":"13"},{"size":4824,"mtime":1610571040629,"results":"21","hashOfConfig":"13"},{"size":3101,"mtime":1610203821327,"results":"22","hashOfConfig":"13"},{"size":849,"mtime":1610203828785,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1n3mdsf",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingMessage.js",[],["60","61"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MainPage.js",["62"],"import React, { Component, useCallback } from 'react'\r\nimport FileContainer from \"./FilesContainer\"\r\nimport { useDropzone } from 'react-dropzone'\r\nimport prettyBytes from \"pretty-bytes\"\r\nimport ImagesSettings from \"./ImagesSettings\"\r\nimport \"../App.css\"\r\nimport \"../specy.css\"\r\nfunction DropZone(props) {\r\n\tconst onDrop = useCallback(acceptedFiles => {\r\n\t\tprops.drop(acceptedFiles)\r\n\t}, [])\r\n\tconst { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\tlet classes = isDragActive ? \"filePicker formatsHovered\" : \"filePicker\"\r\n\tclasses += props.settings.darkMode === \"on\" ? \" filePickerWhite\" : \"\"\r\n\treturn (\r\n\t\t<div {...getRootProps()} className={classes}>\r\n\t\t\t<input {...getInputProps()} />\r\n\t\t\t{\r\n\t\t\t\tisDragActive ?\r\n\t\t\t\t\t<p>Drop files here...</p> :\r\n\t\t\t\t\t<p>Drop files here or click to select.</p>\r\n\t\t\t}\r\n\t\t\t<div className=\"formats\">\r\n\t\t\t\t.webp .png .jpg\r\n\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nclass MainPage extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tisFileHover: false,\r\n\t\t\tfiles: {},\r\n\t\t\tglobalImgSettings: {\r\n\t\t\t\tscale: 2,\r\n\t\t\t\tdenoiseLevel: \"None\",\r\n\t\t\t\toutputFormat: \"Original\"\r\n\t\t\t}\r\n\t\t}\r\n\t\twindow.ipcRenderer.on('done-execution', (event, arg) => {\r\n\t\t\tlet file = this.state.files[arg.id]\r\n\t\t\tfile.message = arg.message\r\n\t\t\tfile.status = arg.status\r\n\t\t\tfile.success = arg.success\r\n\t\t\tfile.updatedImg = arg.upscaledImg\r\n\t\t\tconsole.log(\"Done\")\r\n\t\t\tthis.setState({\r\n\t\t\t\tfiles: this.state.files\r\n\t\t\t})\r\n\t\t})\r\n\t\twindow.ipcRenderer.on('update-execution', (event, arg) => {\r\n\t\t\tconsole.log(\"Update\")\r\n\t\t\tlet file = this.state.files[arg.id]\r\n\t\t\tfile.status = arg.status\r\n\t\t\tthis.setState({\r\n\t\t\t\tfiles: this.state.files\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tremoveImage = (e) => {\r\n\t\tdelete this.state.files[e]\r\n\t\tthis.setState({\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\texecuteWaifu = () => {\r\n\t\tlet dataToSend = Object.keys(this.state.files).map((el) => {\r\n\t\t\tel = this.state.files[el]\r\n\t\t\treturn {\r\n\t\t\t\tname: el.name,\r\n\t\t\t\tpath: el.path,\r\n\t\t\t\twidth: el.width,\r\n\t\t\t\theight: el.height,\r\n\t\t\t\tnoise: el.noise,\r\n\t\t\t\tscale: el.scale,\r\n\t\t\t\tfps: el.fps,\r\n\t\t\t\tendPath: this.props.settings.outputPath,\r\n\t\t\t\tformat: el.format,\r\n\t\t\t\tid: el.id,\r\n\t\t\t\tsize: el.size,\r\n\t\t\t}\r\n\t\t})\r\n\t\twindow.ipcRenderer.send('execute-waifu', dataToSend)\r\n\t}\r\n\r\n\thandleIndividualSettingsChange = (value, type, id) => {\r\n\t\tif (value < 0.6 && type === \"scale\" && value !== \"\") {\r\n\t\t\tvalue = 0.6\r\n\t\t}\r\n\t\tlet oldState = this.state.files[id]\r\n\t\toldState[type] = value\r\n\t\tthis.setState({\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\r\n\thandleImgSettingsChange = (value, type) => {\r\n\t\tlet toChange = this.state.globalImgSettings[type]\r\n\t\ttoChange = isNaN(value) ? value : parseFloat(value)\r\n\t\tif (value < 0.6 && type === \"scale\" && value !== \"\") {\r\n\t\t\ttoChange = 0.6\r\n\t\t}\r\n\t\tlet newState = this.state.globalImgSettings\r\n\t\tnewState[type] = toChange\r\n\t\tObject.keys(this.state.files).map(img => {\r\n\t\t\timg = this.state.files[img]\r\n\t\t\timg.noise = newState.denoiseLevel\r\n\t\t\timg.scale = newState.scale\r\n\t\t\timg.format = newState.outputFormat\r\n\t\t\treturn img\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tglobalImgSettings: newState,\r\n\t\t\tfiles: this.state.files\r\n\t\t})\r\n\t}\r\n\r\n\tgetRandomId = () => {\r\n\t\tlet str1 = Math.random().toString(36).substring(7)\r\n\t\tlet str2 = Math.random().toString(36).substring(7)\r\n\t\treturn str1 + str2\r\n\t}\r\n\r\n\thandleDrop = (e) => {\r\n\t\tlet files = this.state.files\r\n\t\tfor (const file of e) {\r\n\t\t\tlet obj = {\r\n\t\t\t\tname: file.name,\r\n\t\t\t\tpath: file.path,\r\n\t\t\t\tsrc: null,\r\n\t\t\t\twidth: 0,\r\n\t\t\t\theight: 0,\r\n\t\t\t\tfps: 999,\r\n\t\t\t\tendPath : \"default\",\r\n\t\t\t\tscale: this.state.globalImgSettings.scale,\r\n\t\t\t\tstatus: \"idle\",\r\n\t\t\t\tupdatedImg: null,\r\n\t\t\t\tformat: this.state.globalImgSettings.outputFormat,\r\n\t\t\t\tnoise: this.state.globalImgSettings.denoiseLevel,\r\n\t\t\t\tid: this.getRandomId(),\r\n\t\t\t\tsize: file.size,\r\n\t\t\t\tprettySize: prettyBytes(file.size)\r\n\t\t\t}\r\n\t\t\tlet exists = Object.keys(files).findIndex(e => {\r\n\t\t\t\treturn files[e].path === obj.path\r\n\t\t\t})\r\n\t\t\tif (exists < 0) {\r\n\t\t\t\tfiles[obj.id] = obj\r\n\t\t\t\tconst reader = new FileReader();\r\n\t\t\t\treader.onload = (data) => {\r\n\t\t\t\t\tvar image = new Image();\r\n\t\t\t\t\timage.src = data.target.result\r\n\t\t\t\t\timage.onload = () => {\r\n\t\t\t\t\t\tobj.src = data.target.result\r\n\t\t\t\t\t\tobj.width = image.width\r\n\t\t\t\t\t\tobj.height = image.height\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\tfiles: files\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treader.readAsDataURL(file);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//=======================================================//\r\n\trender() {\r\n\t\tlet s = this.props.settings\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={s.darkMode === \"on\" ? \"content dm-L1\" : \"content l1\"}\r\n\t\t\t\tstyle={{ perspective: \"100px\" }}\r\n\t\t\t>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={s.darkMode === \"on\" ? \"upperMainPage dm-L2\" : \"upperMainPage box-shadow\"}\r\n\t\t\t\t>\r\n\t\t\t\t\t<DropZone drop={this.handleDrop} settings={s} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"bottomMainPage\">\r\n\t\t\t\t\t<ImagesSettings\r\n\t\t\t\t\t\tsettings={s}\r\n\t\t\t\t\t\tdata={this.state.globalImgSettings}\r\n\t\t\t\t\t\taction={this.handleImgSettingsChange}\r\n\t\t\t\t\t\texecuteWaifu={this.executeWaifu}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className={s.darkMode === \"on\" ? \"filesHolder dm-L2\" : \"filesHolder l1 box-shadow\"}>\r\n\t\t\t\t\t\t<div className=\"overflowFileHolder scroll\">\r\n\t\t\t\t\t\t\t{Object.keys(this.state.files).map((key) => {\r\n\t\t\t\t\t\t\t\tlet file = this.state.files[key]\r\n\t\t\t\t\t\t\t\treturn <FileContainer\r\n\t\t\t\t\t\t\t\t\tsettings={s}\r\n\t\t\t\t\t\t\t\t\tkey={file.id}\r\n\t\t\t\t\t\t\t\t\taction={this.removeImage}\r\n\t\t\t\t\t\t\t\t\tindividualChange={this.handleIndividualSettingsChange}\r\n\t\t\t\t\t\t\t\t\tdata={file}\r\n\t\t\t\t\t\t\t\t\ttoggleFloatingImages={this.props.toggleFloatingImages}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MainPage",["63","64"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\TopMenu.js",[],["65","66"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\Settings.js",[],["67","68"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\index.js",["69"],"import React, { Component } from 'react'\nimport ReactDOM from 'react-dom';\nimport \"./specy.css\"\nimport \"./App.css\"\nimport SideMenu from \"./Components/SideMenu\"\nimport ContentWrapper from \"./Components/ContentWrapper\"\nimport MainPage from \"./Components/MainPage\"\nimport Settings from \"./Components/Settings\"\nimport FloatingImages from \"./Components/FloatingImages\"\nimport FloatingMessage from \"./Components/FloatingMessage\"\nimport TopMenu from \"./Components/TopMenu\"\nconst Storage = new window.Storage()\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      selectedPage: 0,\n      floatingImagesToggled: false,\n      floatingImages: {},\n      settings: {\n        darkMode: \"off\",\n        outputPath: \"default\"\n      },\n      floatingMessage:{\n        message: \"\",\n        isShown: false,\n        type: \"\"\n      }\n    }\n    window.showMessage = this.showMessage\n    this.checkUpdate()\n    this.populateStorage()\n  }\n  toggleFloatingImages = (data) => {\n    if (!data.hasImages) {\n      data = {\n        original: \"\",\n        format: 0,\n        updated: \"\"\n      }\n    }\n    this.setState({\n      floatingImagesToggled: !this.state.floatingImagesToggled,\n      floatingImages: data\n    })\n\n  }\n  showMessage = (text,type,timeout = 4000,action) =>{\n    let newState = {\n      message: text,\n      isShown: true,\n      type: type,\n      action: action\n    }\n    let tmout = setTimeout(()=>{\n      let newState = this.state.floatingMessage\n      newState.isShown = false\n      this.setState({\n        floatingMessage : newState\n      })\n    },timeout)\n    this.setState({\n      floatingMessage : newState,\n    })\n  }\n  \n  checkUpdate = async () => {\n\t\tlet data = await fetch(\"https://raw.githubusercontent.com/Specy-wot/Scapix/main/package.json\").then(data => data.json())\n\t\tif (data.version !== window.package.version) {\n      let action = () => {\n        let toExec = {\n          data:\"https://github.com/Specy-wot/Scapix\",\n          name: \"open\"\n        }\n        window.ipcRenderer.send(\"exec-function\",toExec)\n      }\n      this.showMessage(\"There is an update available! Click to View\",1,10000,action)\n\t\t} else {\n\t\t\tconsole.log(\"No update\")\n\t\t}\n  }\n\n  populateStorage = async () =>{\n    let data = await Storage.get(\"settings\")\n    if(data){\n      this.setState({\n        settings: data\n      })\n    }\n  }\n\n  toggleSettings = async (data) => {\n    let newState = this.state.settings\n    newState[data.type] = data.value\n    this.setState({\n      settings: newState\n    })\n    await Storage.set(\"settings\",newState)\n  }\n  changePage = (index) => {\n    this.setState({\n      selectedPage: index\n    })\n  }\n  render() {\n    return (\n      <div className=\"body\">\n        <TopMenu/>\n        <FloatingMessage data={this.state.floatingMessage}/>\n        <div className=\"appWrapper\">\n          <FloatingImages\n            toggled={this.state.floatingImagesToggled}\n            toggle={this.toggleFloatingImages}\n            data={this.state.floatingImages}\n          />\n          <SideMenu action={this.changePage} selectedIndex={this.state.selectedPage} settings={this.state.settings} />\n          <ContentWrapper selectedPage={this.state.selectedPage} settings={this.state.settings}>\n            <MainPage toggleFloatingImages={this.toggleFloatingImages} settings={this.state.settings} />\n            <Settings toggleSettings={this.toggleSettings} settings={this.state.settings} />\n          </ContentWrapper>\n        </div>\n      </div>\n    )\n  }\n}\n\n// ========================================\n\nReactDOM.render(< App />, document.getElementById(\"root\"))",["70","71"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ContentWrapper.js",["72","73"],"import React, { Component } from 'react'\r\n\r\nimport \"../App.css\"\r\nimport \"../specy.css\"\r\nclass ContentWrapper extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t}\r\n\r\n\t//=======================================================//\r\n\trender() {\r\n\t\tlet s = this.props.settings\r\n\t\treturn (\r\n\t\t\t<div style={{ display: \"flex\" }}>\r\n\t\t\t\t{this.props.children.map((page, i) => {\r\n\t\t\t\t\tlet isHidden = !(i === this.props.selectedPage)\r\n\t\t\t\t\treturn <div style={isHidden ? { display: \"none\" } : {}} className=\"contentWrapper\" key={i}>\r\n\t\t\t\t\t\t{page}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ContentWrapper",["74","75"],"C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FloatingImages.js",["76","77","78"],"import React, { Component } from 'react'\r\nimport \"../App.css\"\r\nimport { Close } from \"@material-ui/icons\"\r\nclass FloatingImages extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    preventDefault = (e) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n    }\r\n    //=======================================================//\r\n    render() {\r\n        let shown = this.props.toggled ? \"flex\" : \"none\"\r\n\r\n        let isHorizontal = this.props.data.format < 1.5\r\n\r\n        let orientation = {\r\n            width: isHorizontal ? \"calc(35vw - 1.5rem)\" : \"unset\",\r\n            height: isHorizontal ? \"unset\" : \"calc(91vh - 2rem)\"\r\n        }\r\n        return (\r\n            <div\r\n                className=\"floatingImages\"\r\n                style={{ display: shown }}\r\n                onClick={this.props.toggle}\r\n            >\r\n                <Close\r\n                    className=\"closeBtn\"\r\n                    style={{ fontSize: 45 }}\r\n                    onClick={this.props.toggle}\r\n                />\r\n                <div\r\n                    className=\"imagesContainer\"\r\n                    onClick={this.preventDefault}\r\n                >\r\n                    <div className=\"textAndImage\">\r\n                        <div className=\"floatingImgText\">Original</div>\r\n                        <img src={this.props.data.original} style={orientation} />\r\n                    </div>\r\n                    <div className=\"textAndImage\">\r\n                        <div className=\"floatingImgText\">Modified</div>\r\n                        <img src={this.props.data.modified} style={orientation} />\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FloatingImages","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\SideMenu.js",["79"],"import React, { Component } from 'react'\r\nimport MenuOption from \"./MenuOption\"\r\nimport { HomeRounded, Settings } from \"@material-ui/icons\"\r\nimport \"../App.css\"\r\nimport \"../specy.css\"\r\nlet st = {\r\n    selected: {\r\n        fontSize: 40,\r\n        color: \"white\"\r\n    },\r\n    disabled: {\r\n        fontSize: 40,\r\n        color: \"#7e7e7e\"\r\n    }\r\n}\r\nclass SideMenu extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    //=======================================================//\r\n    render() {\r\n        let sel = this.props.selectedIndex\r\n        let s = this.props.settings\r\n        return (\r\n            <div className={s.darkMode === \"on\" ? \"sideMenu dm-L2\" : \"sideMenu dm-L1\"}>\r\n                <MenuOption index={0} action={this.props.action} settings={s}>\r\n                    <HomeRounded style={sel === 0 ? st.selected : st.disabled} />\r\n                </MenuOption>\r\n                <MenuOption index={1} action={this.props.action} settings={s}>\r\n                    <Settings style={sel === 1 ? st.selected : st.disabled} />\r\n                </MenuOption>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SideMenu","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\FilesContainer.js",["80","81"],"import React, { Component } from 'react'\r\nimport \"../App.css\"\r\nimport { DeleteForever, Visibility, Info } from \"@material-ui/icons\"\r\nclass FileContainer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    sendImagesData = () => {\r\n        let data = {\r\n            original: this.props.data.src,\r\n            modified: this.props.data.updatedImg,\r\n            format: this.props.data.height / this.props.data.width,\r\n            hasImages: true\r\n        }\r\n        this.props.toggleFloatingImages(data)\r\n    }\r\n    handleChange = (e) => {\r\n        let el = e.target\r\n        this.props.individualChange(el.value, el.name, this.props.data.id)\r\n    }\r\n    showInfo = (e) => {\r\n        window.showMessage(this.props.data.message,1,10000,() =>{\r\n            console.log(\"clicked\")\r\n        })\r\n    }\r\n    //=======================================================//\r\n    render() {\r\n        let data = this.props.data\r\n        let s = this.props.settings\r\n        let color = s.darkMode === \"on\" ? \"rgb(27, 25, 35)\" : \"rgb(238, 238, 238)\"\r\n        let visible = { visibility: \"hidden\" }\r\n        let visible2 = {visibility: \"hidden\"}\r\n        if (data.status === \"done\") {\r\n            visible2.visibility = \"visible\"\r\n            if (data.success) {\r\n                color = s.darkMode === \"on\" ? \"rgb(75 153 75)\" : \"rgb(200, 239, 200)\"\r\n                visible.visibility = \"visible\"\r\n            } else {\r\n                color = s.darkMode === \"on\" ? \"rgb(144 74 74)\" : \"#e3b0b0\"\r\n            }\r\n        } else if (data.status === \"pending\") {\r\n            color = s.darkMode === \"on\" ? \"#d6c869\" : \"#f7f1cb\"\r\n        }\r\n        return (\r\n            <div\r\n                className={s.darkMode === \"on\" ? \"fileRow\" : \"fileRow text-dark\"}\r\n                style={{ backgroundColor: color }}>\r\n                <div className=\"row\">\r\n                    <div style={{ position: \"relative\" }}>\r\n                        <img src={data.src} className=\"previewImage\" />\r\n                        <div className=\"fileName\">\r\n                            {data.name}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dataCol\">\r\n                        <div>{data.prettySize}</div>\r\n                        <div>\r\n                            {data.width}x{data.height}\r\n                            {\" ➤ \"}\r\n                            {Math.floor(data.width * data.scale)}x\r\n                            {Math.floor(data.height * data.scale)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"flex centerX centerY\">\r\n                    {data.name.includes(\".gif\") ? \r\n                        <div className=\"column centerY\" style={{ marginRight: \"0.5rem\" }}>\r\n                            <div style={{ marginTop: \"-1.2rem\" }}>Frames</div>\r\n                            <input\r\n                                type=\"number\"\r\n                                className={\"individualInput\"}\r\n                                step=\"1\"\r\n                                name=\"fps\"\r\n                                onChange={this.handleChange}\r\n                                value={data.fps}\r\n                            />\r\n                        </div> \r\n                        : \"\"\r\n                    }\r\n                    <div className=\"column centerY\" style={{ marginRight: \"0.5rem\" }}>\r\n                        <div style={{ marginTop: \"-1.2rem\" }}>Scale</div>\r\n                        <input\r\n                            type=\"number\"\r\n                            className={\"individualInput\"}\r\n                            step=\"0.05\"\r\n                            name=\"scale\"\r\n                            onChange={this.handleChange}\r\n                            value={data.scale}\r\n                        />\r\n                    </div>\r\n                    <Info\r\n                        className={s.darkMode === \"on\" ? \"text-white highlightHover\" : \"text-dark highlightHover\"}\r\n                        style={{ fontSize: 25, ...visible2 }}\r\n                        onClick={this.showInfo}\r\n                    />\r\n                    <Visibility\r\n                        className={s.darkMode === \"on\" ? \"text-white highlightHover\" : \"text-dark highlightHover\"}\r\n                        style={{ fontSize: 25, ...visible }}\r\n                        onClick={this.sendImagesData}\r\n                    />\r\n                    <DeleteForever\r\n                        onClick={() => this.props.action(data.id)}\r\n                        className={s.darkMode === \"on\" ? \"text-white redHover\" : \"text-dark redHover\"}\r\n                        style={{ fontSize: 25 }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileContainer","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\ImagesSettings.js",["82"],"import React, { Component } from 'react'\r\nclass ImagesSettings extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.props.action(event.target.value, event.target.name)\r\n    }\r\n    openFolder = () => {\r\n        window.ipcRenderer.send(\"open-folder\")\r\n    }\r\n    //=======================================================//\r\n    render() {\r\n        let data = this.props.data\r\n        let s = this.props.settings\r\n        return (\r\n\r\n            <div className={s.darkMode === \"on\" ? \"sideSettings dm-L2\" : \"sideSettings l1 box-shadow\"}>\r\n                <div className=\"innerSideSettings\">\r\n                    <div className=\"column\">\r\n                        <div>Scale</div>\r\n                        <input\r\n                            type=\"number\"\r\n                            step=\"0.05\"\r\n                            value={data.scale}\r\n                            className=\"input wm-L2\"\r\n                            name=\"scale\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div>Denoise level</div>\r\n                        <select\r\n                            className=\"input wm-L2\"\r\n                            value={data.denoiseLevel}\r\n                            name=\"denoiseLevel\"\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <option>None</option>\r\n                            <option>Low</option>\r\n                            <option>Medium</option>\r\n                            <option>High</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div>Output format</div>\r\n                        <select\r\n                            className=\"input wm-L2\"\r\n                            value={data.outputFormat}\r\n                            name=\"outputFormat\"\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <option>Original</option>\r\n                            <option>.png</option>\r\n                            <option>.jpg</option>\r\n                            <option>.webp</option>\r\n                        </select>\r\n                    </div>\r\n                    <button\r\n                        style={{ margin: 0, marginTop: \"auto\" }}\r\n                        className=\"button fillY outputFolder\"\r\n                        onClick={this.openFolder}\r\n                    >\r\n                        Open output folder\r\n                    </button>\r\n                    <button\r\n                        className=\"button fillY darkTeal\"\r\n                        style={{ marginTop: \"0.5rem\" }}\r\n                        onClick={this.props.executeWaifu}\r\n                    >\r\n                        Run all\r\n                    </button>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImagesSettings","C:\\Users\\dione\\Desktop\\Progetti\\electron\\scapix\\src\\Components\\MenuOption.js",["83"],"import React, { Component } from 'react'\r\nimport \"../App.css\"\r\nlet st = {\r\n    wrapper: {\r\n        borderRadius: \"0.5rem\",\r\n        width: \"55px\",\r\n        height: \"55px\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        marginTop: \"1rem\"\r\n    }\r\n\r\n}\r\nclass MenuOption extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    //=======================================================//\r\n\r\n    render() {\r\n        let s = this.props.settings\r\n        return (\r\n            <div\r\n                style={st.wrapper}\r\n                className={s.darkMode === \"on\" ? \"dm-L1\" : \"dm-L2\"}\r\n                onClick={() => this.props.action(this.props.index)}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MenuOption",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":11,"column":5,"nodeType":"90","endLine":11,"endColumn":7,"suggestions":"91"},{"ruleId":"84","replacedBy":"92"},{"ruleId":"86","replacedBy":"93"},{"ruleId":"84","replacedBy":"94"},{"ruleId":"86","replacedBy":"95"},{"ruleId":"84","replacedBy":"96"},{"ruleId":"86","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":55,"column":9,"nodeType":"100","messageId":"101","endLine":55,"endColumn":14},{"ruleId":"84","replacedBy":"102"},{"ruleId":"86","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":6,"column":2,"nodeType":"106","messageId":"107","endLine":8,"endColumn":3},{"ruleId":"98","severity":1,"message":"108","line":12,"column":7,"nodeType":"100","messageId":"101","endLine":12,"endColumn":8},{"ruleId":"84","replacedBy":"109"},{"ruleId":"86","replacedBy":"110"},{"ruleId":"104","severity":1,"message":"105","line":5,"column":5,"nodeType":"106","messageId":"107","endLine":7,"endColumn":6},{"ruleId":"111","severity":1,"message":"112","line":39,"column":25,"nodeType":"113","endLine":39,"endColumn":83},{"ruleId":"111","severity":1,"message":"112","line":43,"column":25,"nodeType":"113","endLine":43,"endColumn":83},{"ruleId":"104","severity":1,"message":"105","line":17,"column":5,"nodeType":"106","messageId":"107","endLine":19,"endColumn":6},{"ruleId":"104","severity":1,"message":"105","line":5,"column":5,"nodeType":"106","messageId":"107","endLine":7,"endColumn":6},{"ruleId":"111","severity":1,"message":"112","line":50,"column":25,"nodeType":"113","endLine":50,"endColumn":72},{"ruleId":"104","severity":1,"message":"105","line":3,"column":5,"nodeType":"106","messageId":"107","endLine":6,"endColumn":6},{"ruleId":"104","severity":1,"message":"105","line":16,"column":5,"nodeType":"106","messageId":"107","endLine":18,"endColumn":6},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["116"],["114"],["115"],["114"],["115"],["114"],["115"],"no-unused-vars","'tmout' is assigned a value but never used.","Identifier","unusedVar",["114"],["115"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'s' is assigned a value but never used.",["114"],["115"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},"Update the dependencies array to be: [props]",{"range":"119","text":"120"},[387,389],"[props]"]